

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(uuid())
  email    String @db.VarChar(50) @unique
  name     String @db.VarChar(255)
  password String  @db.VarChar(255)
  role     String
  image    String?
  is_penalty Boolean @default(false)

  membership Membership?
  cart     Cart[]
  collection Collection[]
  orders   Order[]
  books_borrowed BookBorrowed[]
  Book_selling BookSelling[]
  Book_borrowing BookBorrowing[]
}

model Membership {
  id       String @id @default(uuid())
  type     String
  start_date DateTime @db.Timestamptz()
  end_date   DateTime @db.Timestamptz()

  user_id   String @unique
  user     User @relation(fields: [user_id], references: [id])
}

model Publisher {
  id   String @id @default(uuid())
  name String  @db.VarChar(255) @unique

  books_selling BookSelling[]
  books_borrowing BookBorrowing[]
}

model Writer {
  id   String @id @default(uuid())
  name String @db.VarChar(255) @unique

  books_Selling BookSelling[]
  books_borrowing BookBorrowing[]
}

model Category {
  id  String @id @default(uuid())
  name String @db.VarChar(50) @unique

  booksSell BookCategorySell[]
  booksBorrow BookCategoryBorrow[]

}

model BookCategorySell {
  book_id String
  category_id String

  books_selling BookSelling @relation(fields: [book_id], references: [id])
  categories Category @relation(fields: [category_id], references: [id])
  
  @@id([book_id, category_id])
}

model BookCategoryBorrow {
  book_id String
  category_id String

  books_borrow BookBorrowing @relation(fields: [book_id], references: [id])
  categories Category @relation(fields: [category_id], references: [id])
  
  @@id([book_id, category_id])
}

model BookSelling {
  id          String @id @default(uuid())
  title       String @db.VarChar(255) @unique
  description String
  language    String
  stock       Int
  imageUrl String?
  price Int
  created_at   DateTime @default(now()) @db.Timestamptz()

  user_id      String
  publisher_id String
  writer_id    String
  cart_item     CartItem[]
  item_orders  ItemOrder[]
  category BookCategorySell[]

  user        User @relation(fields: [user_id], references: [id])
  publisher   Publisher @relation(fields: [publisher_id], references: [id])
  writer      Writer @relation(fields: [writer_id], references: [id])
}

model Cart {
  id          String @id @default(uuid())

  user_id        String @unique

  user          User   @relation(fields: [user_id], references: [id])
  cart_items   CartItem[]
}

model CartItem {
  quantity    Int

  cart_id      String
  book_selling_id   String

  cart Cart      @relation(fields: [cart_id], references: [id])
  book_selling BookSelling @relation(fields: [book_selling_id], references: [id], onDelete: Cascade)
   @@id([cart_id, book_selling_id])
}


model Order {
  id             String @id @default(uuid())
  status         String
  buy_key         String? @db.VarChar(50) @unique
  buy_handled_by String?
  buy_date   DateTime? @db.Timestamptz()
  total_price     Int
  created_at      DateTime @default(now()) @db.Timestamptz()
  ended_at        DateTime? @db.Timestamptz()
  canceled_at     DateTime? @db.Timestamptz()
  paid_at         DateTime? @db.Timestamptz()

  userId         String
  item_orders     ItemOrder[]

  user           User @relation(fields: [userId], references: [id])
}

model ItemOrder {
  id            String @id @default(uuid())
  book_title     String @db.VarChar(255)
  book_description String
  book_imageUrl String?
  book_price     Int
  quantity      Int

  order_id       String
  book_selling_id String?

  order         Order @relation(fields: [order_id], references: [id])
  book_selling   BookSelling? @relation(fields: [book_selling_id], references: [id], onDelete: SetNull)
}

model Collection {
  id          String @id @default(uuid())

  user_id        String @unique

  user          User   @relation(fields: [user_id], references: [id])
  collection_item CollectionItem[]
}
model CollectionItem {
  collection_id String
  book_id  String
 

  collection Collection @relation(fields: [collection_id], references: [id])
  book_borrowing    BookBorrowing @relation(fields: [book_id], references: [id], onDelete: Cascade)

  @@id([collection_id, book_id])
}

model BookBorrowing {
  id          String @id @default(uuid())
  title       String @db.VarChar(255) @unique
  description String
  book_position String @db.VarChar(10)
  language    String
  stock       Int
  imageUrl String?
  is_member    Boolean @default(false)
  created_at   DateTime @default(now()) @db.Timestamptz()

  user_id      String
  publisher_id String
  writer_id    String
  collection_item CollectionItem[]
  category BookCategoryBorrow[]

  user        User @relation(fields: [user_id], references: [id])
  publisher   Publisher @relation(fields: [publisher_id], references: [id])
  writer      Writer @relation(fields: [writer_id], references: [id])
}

model BookBorrowed {
  id             String @id @default(uuid())
  status         String
  loan_key        String? @db.VarChar(50)  @unique  
  loan_handled_by  String?
  loan_date       DateTime? @db.Timestamptz()
  returned_key    String? @db.VarChar(50)  @unique
  return_handled_by String?
  date_returned   DateTime? @db.Timestamptz()
  created_at      DateTime @default(now()) @db.Timestamptz()
  canceled_at     DateTime? @db.Timestamptz()
  ended_at        DateTime? @db.Timestamptz()

  userId         String
  items          ItemBorrowed[]

  user           User @relation(fields: [userId], references: [id])
}

model ItemBorrowed {
  id                String @id @default(uuid())
  book_title     String @db.VarChar(255)
  book_description String
  book_imageUrl String?

  borrowed_id String
  book_borrowing_id String
  bookBorrowed      BookBorrowed @relation(fields: [borrowed_id], references: [id])
}

model Log {
  id        Int      @id @default(autoincrement())
  level     String
  message   String
  createdAt DateTime @default(dbgenerated("timezone('Asia/Jakarta', now())"))
}